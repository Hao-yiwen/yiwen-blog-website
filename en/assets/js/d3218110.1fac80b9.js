"use strict";(self.webpackChunkyiwen_blog_website=self.webpackChunkyiwen_blog_website||[]).push([[2748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,y=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?i.createElement(y,r(r({ref:t},p),{},{components:n})):i.createElement(y,r({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[c]="string"==typeof e?e:a,r[1]=d;for(var l=2;l<o;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=n(87462),a=(n(67294),n(3905));const o={},r="\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b",d={unversionedId:"native/android/base_loading",id:"native/android/base_loading",title:"\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b",description:"\u52a8\u753b\u4f7f\u7528lottie\u52a8\u753b\uff0c\u6548\u679c\u66f4\u597d\u3002",source:"@site/docs/native/android/base_loading.md",sourceDirName:"native/android",slug:"/native/android/base_loading",permalink:"/yiwen-blog-website/en/docs/native/android/base_loading",draft:!1,editUrl:"https://github.com/Hao-yiwen/yiwen-blog-website/tree/master/docs/native/android/base_loading.md",tags:[],version:"current",frontMatter:{},sidebar:"nativeSidebar",previous:{title:"Android\u4e2dxml\u7684\u4e3b\u9898\u5207\u6362",permalink:"/yiwen-blog-website/en/docs/native/android/attr_value"},next:{title:"Gradle\u4e2d\u7684Bom\u4f9d\u8d56\u7ba1\u7406",permalink:"/yiwen-blog-website/en/docs/native/android/bom"}},s={},l=[],p={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u57fa\u4e8ebaseactivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b"},"\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b"),(0,a.kt)("p",null,"\u52a8\u753b\u4f7f\u7528lottie\u52a8\u753b\uff0c\u6548\u679c\u66f4\u597d\u3002"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"BaseActivity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import android.content.res.Configuration;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.LinearLayout;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport com.airbnb.lottie.LottieAnimationView;\n\npublic abstract class BaseActivity extends AppCompatActivity {\n    LottieAnimationView lottieAnimationView;\n    LinearLayout loadingLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        int currentNightMode = getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n        if (currentNightMode == Configuration.UI_MODE_NIGHT_NO) {\n            // Night mode is not active, we\'re using the light theme\n            Log.d("BigHomeActivity", "onCreate: light theme");\n            setTheme(R.style.AppTheme);\n        } else if (currentNightMode == Configuration.UI_MODE_NIGHT_YES) {\n            // Night mode is active, we\'re using dark theme\n            Log.d("BigHomeActivity", "onCreate: dark theme");\n            setTheme(R.style.AppTheme_Dark);\n        }\n\n        EdgeToEdge.enable(this);\n        setContentView(R.layout.activity_base);\n\n        LayoutInflater.from(this).inflate(getLayoutResId(), findViewById(R.id.container), true);\n\n        lottieAnimationView = findViewById(R.id.lottieAnimationView);\n        loadingLayout = findViewById(R.id.loadingLayout);\n    }\n\n    protected abstract int getLayoutResId();\n\n    protected void showLoading() {\n        if (lottieAnimationView != null) {\n            loadingLayout.setVisibility(View.VISIBLE);\n            lottieAnimationView.playAnimation();\n        }\n    }\n\n    protected void hideLoading() {\n        if (lottieAnimationView != null) {\n            // \u641e\u70b9\u52a8\u753b\u5c0f\u65f6\u65f6\u5019\u7684\u52a8\u753b\u6548\u679c\n            loadingLayout.animate()\n                    .alpha(0f)\n                    .setDuration(500)\n                    .withEndAction(() -> {\n                        loadingLayout.setVisibility(View.GONE);\n                        lottieAnimationView.cancelAnimation();\n                    })\n                    .start();\n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n    <FrameLayout\n        android:id="@+id/container"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n\n    <LinearLayout\n        android:id="@+id/loadingLayout"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:background="?attr/backgroundColor"\n        android:gravity="center"\n        android:orientation="vertical">\n\n        <com.airbnb.lottie.LottieAnimationView\n            android:id="@+id/lottieAnimationView"\n            android:layout_width="200dp"\n            android:layout_height="200dp"\n            android:layout_centerInParent="true"\n            android:visibility="visible"\n            app:lottie_autoPlay="false"\n            app:lottie_loop="true"\n            app:lottie_rawRes="@raw/loading" />\n\n        <TextView\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:gravity="center"\n            android:text="\u52a0\u8f7d\u4e2d..."\n            android:textColor="@color/black"\n            android:textSize="16sp"\n            android:visibility="visible" />\n    </LinearLayout>\n\n</FrameLayout>\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\u4e1a\u52a1Activity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import android.os.Bundle;\nimport android.os.Handler;\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\npublic class BaseLoadingTestActivity extends BaseActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        showLoading();\n\n        new Handler().postDelayed(() -> {\n            hideLoading();\n        }, 2000);\n    }\n\n    @Override\n    protected int getLayoutResId() {\n        return R.layout.activity_base_loading_test;\n    }\n}\n")))}m.isMDXComponent=!0}}]);