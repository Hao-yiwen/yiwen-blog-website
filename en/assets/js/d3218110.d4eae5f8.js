"use strict";(globalThis.webpackChunkyiwen_blog_website=globalThis.webpackChunkyiwen_blog_website||[]).push([[4305],{28453:(n,t,e)=>{e.d(t,{R:()=>d,x:()=>r});var i=e(96540);const a={},o=i.createContext(a);function d(n){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:d(n.components),i.createElement(o.Provider,{value:t},n.children)}},39506:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"native/android/base_loading","title":"\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b","description":"\u52a8\u753b\u4f7f\u7528lottie\u52a8\u753b\uff0c\u6548\u679c\u66f4\u597d\u3002","source":"@site/docs/native/android/base_loading.md","sourceDirName":"native/android","slug":"/native/android/base_loading","permalink":"/yiwen-blog-website/en/docs/native/android/base_loading","draft":false,"unlisted":false,"editUrl":"https://github.com/Hao-yiwen/yiwen-blog-website/tree/master/docs/native/android/base_loading.md","tags":[],"version":"current","frontMatter":{},"sidebar":"nativeSidebar","previous":{"title":"Android\u4e2dxml\u7684\u4e3b\u9898\u5207\u6362","permalink":"/yiwen-blog-website/en/docs/native/android/attr_value"},"next":{"title":"Gradle\u4e2d\u7684Bom\u4f9d\u8d56\u7ba1\u7406","permalink":"/yiwen-blog-website/en/docs/native/android/bom"}}');var a=e(74848),o=e(28453);const d={},r="\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b",s={},l=[];function c(n){const t={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"\u57fa\u4e8ebaseactivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b",children:"\u57fa\u4e8eBaseActivity\u6dfb\u52a0loading\u56fe\u6807\u52a8\u753b"})}),"\n",(0,a.jsx)(t.p,{children:"\u52a8\u753b\u4f7f\u7528lottie\u52a8\u753b\uff0c\u6548\u679c\u66f4\u597d\u3002"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"BaseActivity"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'import android.content.res.Configuration;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.LinearLayout;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport com.airbnb.lottie.LottieAnimationView;\n\npublic abstract class BaseActivity extends AppCompatActivity {\n    LottieAnimationView lottieAnimationView;\n    LinearLayout loadingLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        int currentNightMode = getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n        if (currentNightMode == Configuration.UI_MODE_NIGHT_NO) {\n            // Night mode is not active, we\'re using the light theme\n            Log.d("BigHomeActivity", "onCreate: light theme");\n            setTheme(R.style.AppTheme);\n        } else if (currentNightMode == Configuration.UI_MODE_NIGHT_YES) {\n            // Night mode is active, we\'re using dark theme\n            Log.d("BigHomeActivity", "onCreate: dark theme");\n            setTheme(R.style.AppTheme_Dark);\n        }\n\n        EdgeToEdge.enable(this);\n        setContentView(R.layout.activity_base);\n\n        LayoutInflater.from(this).inflate(getLayoutResId(), findViewById(R.id.container), true);\n\n        lottieAnimationView = findViewById(R.id.lottieAnimationView);\n        loadingLayout = findViewById(R.id.loadingLayout);\n    }\n\n    protected abstract int getLayoutResId();\n\n    protected void showLoading() {\n        if (lottieAnimationView != null) {\n            loadingLayout.setVisibility(View.VISIBLE);\n            lottieAnimationView.playAnimation();\n        }\n    }\n\n    protected void hideLoading() {\n        if (lottieAnimationView != null) {\n            // \u641e\u70b9\u52a8\u753b\u5c0f\u65f6\u65f6\u5019\u7684\u52a8\u753b\u6548\u679c\n            loadingLayout.animate()\n                    .alpha(0f)\n                    .setDuration(500)\n                    .withEndAction(() -> {\n                        loadingLayout.setVisibility(View.GONE);\n                        lottieAnimationView.cancelAnimation();\n                    })\n                    .start();\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n    <FrameLayout\n        android:id="@+id/container"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n\n    <LinearLayout\n        android:id="@+id/loadingLayout"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:background="?attr/backgroundColor"\n        android:gravity="center"\n        android:orientation="vertical">\n\n        <com.airbnb.lottie.LottieAnimationView\n            android:id="@+id/lottieAnimationView"\n            android:layout_width="200dp"\n            android:layout_height="200dp"\n            android:layout_centerInParent="true"\n            android:visibility="visible"\n            app:lottie_autoPlay="false"\n            app:lottie_loop="true"\n            app:lottie_rawRes="@raw/loading" />\n\n        <TextView\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:gravity="center"\n            android:text="\u52a0\u8f7d\u4e2d..."\n            android:textColor="@color/black"\n            android:textSize="16sp"\n            android:visibility="visible" />\n    </LinearLayout>\n\n</FrameLayout>\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:"\u4e1a\u52a1Activity"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"import android.os.Bundle;\nimport android.os.Handler;\nimport androidx.activity.EdgeToEdge;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\npublic class BaseLoadingTestActivity extends BaseActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        showLoading();\n\n        new Handler().postDelayed(() -> {\n            hideLoading();\n        }, 2000);\n    }\n\n    @Override\n    protected int getLayoutResId() {\n        return R.layout.activity_base_loading_test;\n    }\n}\n"})})]})}function p(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);