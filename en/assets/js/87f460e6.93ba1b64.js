"use strict";(self.webpackChunkyiwen_blog_website=self.webpackChunkyiwen_blog_website||[]).push([[5752],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,y=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={},a="kotlin\u4e2d\u7684\u534f\u6210\u5e76\u53d1\u8bf7\u6c42",l={unversionedId:"native/android/kotlin/kotlin_coroutine",id:"native/android/kotlin/kotlin_coroutine",title:"kotlin\u4e2d\u7684\u534f\u6210\u5e76\u53d1\u8bf7\u6c42",description:"\u6709\u4e00\u4e2a\u5178\u578b\u793a\u4f8b\u662f\u5728viewModel\u4e2d\u540c\u65f6\u8fdb\u884c\u6570\u636e\u5e93\u8bfb\u5199\u548c\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u3002",source:"@site/docs/native/android/kotlin/kotlin_coroutine.md",sourceDirName:"native/android/kotlin",slug:"/native/android/kotlin/kotlin_coroutine",permalink:"/yiwen-blog-website/en/docs/native/android/kotlin/kotlin_coroutine",draft:!1,editUrl:"https://github.com/Hao-yiwen/yiwen-blog-website/tree/master/docs/native/android/kotlin/kotlin_coroutine.md",tags:[],version:"current",frontMatter:{},sidebar:"nativeSidebar",previous:{title:"Kotlin\u57fa\u7840",permalink:"/yiwen-blog-website/en/docs/native/android/kotlin/kotlin_base"},next:{title:"Kotlin\u4e2d\u5404\u4e2a\u6743\u9650\u5173\u952e\u5b57",permalink:"/yiwen-blog-website/en/docs/native/android/kotlin/kotlin_permisson"}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"kotlin\u4e2d\u7684\u534f\u6210\u5e76\u53d1\u8bf7\u6c42"},"kotlin\u4e2d\u7684\u534f\u6210\u5e76\u53d1\u8bf7\u6c42"),(0,o.kt)("p",null,"\u6709\u4e00\u4e2a\u5178\u578b\u793a\u4f8b\u662f\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"viewModel"),"\u4e2d\u540c\u65f6\u8fdb\u884c\u6570\u636e\u5e93\u8bfb\u5199\u548c\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},'viewModelScope.launch {\n    _status.postValue("Loading...")\n\n    // \u5e76\u884c\u6267\u884c\u7f51\u7edc\u8bf7\u6c42\u548c\u6570\u636e\u5e93\u5199\u5165\n    coroutineScope {\n        // \u786e\u4fdd\u6240\u6709\u5b50\u534f\u7a0b\u5b8c\u6210\n        val networkJob = async(Dispatchers.IO) {\n            try {\n                val response = apiService.fetchData()\n                if (response.isSuccessful) {\n                    response.body()?.let { myDao.insertData(it) }\n                    "Data fetched and stored successfully"\n                } else {\n                    "Failed to fetch data: ${response.errorBody()?.string()}"\n                }\n            } catch (e: Exception) {\n                "Network request failed: ${e.message}"\n            }\n        }\n        // \u7f51\u7edc\u8bf7\u6c42\n        _status.postValue(networkJob.await()) // You can modify this based on your logic\n    }\n}\n')))}d.isMDXComponent=!0}}]);