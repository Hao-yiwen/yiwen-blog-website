"use strict";(globalThis.webpackChunkyiwen_blog_website=globalThis.webpackChunkyiwen_blog_website||[]).push([[51430],{28453:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>c});var i=e(96540);const o={},a=i.createContext(o);function r(n){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:t},n.children)}},83363:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"native/android/notify","title":"Android\u901a\u77e5\u5b9e\u73b0","description":"\u4eca\u5929\u5728\u5199\u8054\u7cfb\u7684\u65f6\u5019\u770b\u5230\u4e00\u6bb5\u5b98\u65b9\u901a\u77e5\u5de5\u5177\u7c7b\uff0c\u62ff\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002","source":"@site/docs/native/android/notify.md","sourceDirName":"native/android","slug":"/native/android/notify","permalink":"/yiwen-blog-website/en/docs/native/android/notify","draft":false,"unlisted":false,"editUrl":"https://github.com/Hao-yiwen/yiwen-blog-website/tree/master/docs/native/android/notify.md","tags":[],"version":"current","frontMatter":{},"sidebar":"nativeSidebar","previous":{"title":"navigateUp\u548cpopBackStack","permalink":"/yiwen-blog-website/en/docs/native/android/navigateUp"},"next":{"title":"\u4ee3\u7801\u6df7\u6dc6","permalink":"/yiwen-blog-website/en/docs/native/android/proguard"}}');var o=e(74848),a=e(28453);const r={},c="Android\u901a\u77e5\u5b9e\u73b0",d={},s=[];function l(n){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"android\u901a\u77e5\u5b9e\u73b0",children:"Android\u901a\u77e5\u5b9e\u73b0"})}),"\n",(0,o.jsx)(t.p,{children:"\u4eca\u5929\u5728\u5199\u8054\u7cfb\u7684\u65f6\u5019\u770b\u5230\u4e00\u6bb5\u5b98\u65b9\u901a\u77e5\u5de5\u5177\u7c7b\uff0c\u62ff\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-kt",children:"import android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport androidx.core.app.NotificationCompat\nimport androidx.core.app.NotificationManagerCompat\nimport com.example.waterme.CHANNEL_ID\nimport com.example.waterme.MainActivity\nimport com.example.waterme.NOTIFICATION_ID\nimport com.example.waterme.NOTIFICATION_TITLE\nimport com.example.waterme.R\nimport com.example.waterme.REQUEST_CODE\nimport com.example.waterme.VERBOSE_NOTIFICATION_CHANNEL_DESCRIPTION\nimport com.example.waterme.VERBOSE_NOTIFICATION_CHANNEL_NAME\n\nfun makePlantReminderNotification(\n    message: String,\n    context: Context\n) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        // Create the NotificationChannel, but only on API 26+ because\n        // the NotificationChannel class is new and not in the support library\n        val importance = NotificationManager.IMPORTANCE_HIGH\n        val channel = NotificationChannel(\n            CHANNEL_ID,\n            VERBOSE_NOTIFICATION_CHANNEL_NAME,\n            importance\n        )\n        channel.description = VERBOSE_NOTIFICATION_CHANNEL_DESCRIPTION\n\n        val notificationManager =\n            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager?\n\n        notificationManager?.createNotificationChannel(channel)\n    }\n\n    val pendingIntent: PendingIntent = createPendingIntent(context)\n\n    val builder = NotificationCompat.Builder(context, CHANNEL_ID)\n        .setSmallIcon(R.drawable.ic_launcher_foreground)\n        .setContentTitle(NOTIFICATION_TITLE)\n        .setContentText(message)\n        .setPriority(NotificationCompat.PRIORITY_HIGH)\n        .setVibrate(LongArray(0))\n        .setContentIntent(pendingIntent)\n        .setAutoCancel(true)\n\n    NotificationManagerCompat.from(context).notify(NOTIFICATION_ID, builder.build())\n}\n\nfun createPendingIntent(appContext: Context): PendingIntent {\n    val intent = Intent(appContext, MainActivity::class.java).apply {\n        flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n    }\n\n    // Flag to detect unsafe launches of intents for Android 12 and higher\n    // to improve platform security\n    var flags = PendingIntent.FLAG_UPDATE_CURRENT\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        flags = flags or PendingIntent.FLAG_IMMUTABLE\n    }\n\n    return PendingIntent.getActivity(\n        appContext,\n        REQUEST_CODE,\n        intent,\n        flags\n    )\n}\n"})})]})}function p(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);