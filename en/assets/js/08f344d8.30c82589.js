"use strict";(self.webpackChunkyiwen_blog_website=self.webpackChunkyiwen_blog_website||[]).push([[3113],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>u});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=r.createContext({}),l=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},d=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},m="mdxType",s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,p=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),m=l(t),f=i,u=m["".concat(p,".").concat(f)]||m[f]||s[f]||o;return t?r.createElement(u,a(a({ref:e},d),{},{components:t})):r.createElement(u,a({ref:e},d))}));function u(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=f;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=n,c[m]="string"==typeof n?n:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5807:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const o={},a="Android\u901a\u77e5\u5b9e\u73b0",c={unversionedId:"native/android/notify",id:"native/android/notify",title:"Android\u901a\u77e5\u5b9e\u73b0",description:"\u4eca\u5929\u5728\u5199\u8054\u7cfb\u7684\u65f6\u5019\u770b\u5230\u4e00\u6bb5\u5b98\u65b9\u901a\u77e5\u5de5\u5177\u7c7b\uff0c\u62ff\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002",source:"@site/docs/native/android/notify.md",sourceDirName:"native/android",slug:"/native/android/notify",permalink:"/yiwen-blog-website/en/docs/native/android/notify",draft:!1,editUrl:"https://github.com/Hao-yiwen/yiwen-blog-website/tree/master/docs/native/android/notify.md",tags:[],version:"current",frontMatter:{},sidebar:"nativeSidebar",previous:{title:"navigateUp\u548cpopBackStack",permalink:"/yiwen-blog-website/en/docs/native/android/navigateUp"},next:{title:"\u8bb0\u5f55\u4e00\u4e2a\u5728jetbrains\u4e2d\u8fd8\u7528\u7684\u63d2\u4ef6",permalink:"/yiwen-blog-website/en/docs/native/android/translate"}},p={},l=[],d={toc:l},m="wrapper";function s(n){let{components:e,...t}=n;return(0,i.kt)(m,(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"android\u901a\u77e5\u5b9e\u73b0"},"Android\u901a\u77e5\u5b9e\u73b0"),(0,i.kt)("p",null,"\u4eca\u5929\u5728\u5199\u8054\u7cfb\u7684\u65f6\u5019\u770b\u5230\u4e00\u6bb5\u5b98\u65b9\u901a\u77e5\u5de5\u5177\u7c7b\uff0c\u62ff\u6765\u8bb0\u5f55\u4e00\u4e0b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"import android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport androidx.core.app.NotificationCompat\nimport androidx.core.app.NotificationManagerCompat\nimport com.example.waterme.CHANNEL_ID\nimport com.example.waterme.MainActivity\nimport com.example.waterme.NOTIFICATION_ID\nimport com.example.waterme.NOTIFICATION_TITLE\nimport com.example.waterme.R\nimport com.example.waterme.REQUEST_CODE\nimport com.example.waterme.VERBOSE_NOTIFICATION_CHANNEL_DESCRIPTION\nimport com.example.waterme.VERBOSE_NOTIFICATION_CHANNEL_NAME\n\nfun makePlantReminderNotification(\n    message: String,\n    context: Context\n) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        // Create the NotificationChannel, but only on API 26+ because\n        // the NotificationChannel class is new and not in the support library\n        val importance = NotificationManager.IMPORTANCE_HIGH\n        val channel = NotificationChannel(\n            CHANNEL_ID,\n            VERBOSE_NOTIFICATION_CHANNEL_NAME,\n            importance\n        )\n        channel.description = VERBOSE_NOTIFICATION_CHANNEL_DESCRIPTION\n\n        val notificationManager =\n            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager?\n\n        notificationManager?.createNotificationChannel(channel)\n    }\n\n    val pendingIntent: PendingIntent = createPendingIntent(context)\n\n    val builder = NotificationCompat.Builder(context, CHANNEL_ID)\n        .setSmallIcon(R.drawable.ic_launcher_foreground)\n        .setContentTitle(NOTIFICATION_TITLE)\n        .setContentText(message)\n        .setPriority(NotificationCompat.PRIORITY_HIGH)\n        .setVibrate(LongArray(0))\n        .setContentIntent(pendingIntent)\n        .setAutoCancel(true)\n\n    NotificationManagerCompat.from(context).notify(NOTIFICATION_ID, builder.build())\n}\n\nfun createPendingIntent(appContext: Context): PendingIntent {\n    val intent = Intent(appContext, MainActivity::class.java).apply {\n        flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n    }\n\n    // Flag to detect unsafe launches of intents for Android 12 and higher\n    // to improve platform security\n    var flags = PendingIntent.FLAG_UPDATE_CURRENT\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        flags = flags or PendingIntent.FLAG_IMMUTABLE\n    }\n\n    return PendingIntent.getActivity(\n        appContext,\n        REQUEST_CODE,\n        intent,\n        flags\n    )\n}\n")))}s.isMDXComponent=!0}}]);